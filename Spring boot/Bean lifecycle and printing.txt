Stages of the Bean Lifecycle in Spring Boot:
Instantiation: The Spring container creates the bean by calling the constructor.
Populate properties: Spring injects dependencies into the bean (via autowiring, if necessary).
Set Bean Name: If the bean implements BeanNameAware, the setBeanName method is called.
Set Bean Factory: If the bean implements BeanFactoryAware, the setBeanFactory method is called.
Pre-Initialization (optional): Spring can apply custom initialization logic if you define InitializingBean or use @PostConstruct.
Post-Initialization (optional): If you have any custom post-processors, they will be called here.
Ready for Use: The bean is now ready to be used by the application.
Destruction: When the application context is closed or the bean is no longer needed, Spring will call the @PreDestroy or destroy method (if defined).
Example Code for Demonstrating Bean Lifecycle:
java
Copy code
import org.springframework.beans.factory.BeanNameAware;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

@Component
public class MyBean implements BeanNameAware, InitializingBean {

    @Value("${app.name}")
    private String appName;

    public MyBean() {
        System.out.println("Constructor: MyBean instance created.");
    }

    @Override
    public void setBeanName(String name) {
        System.out.println("SetBeanName: Bean name is " + name);
    }

    @PostConstruct
    public void postConstruct() {
        System.out.println("PostConstruct: Bean is initialized.");
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println("AfterPropertiesSet: Bean properties are set.");
    }

    public void customInit() {
        System.out.println("CustomInit: Bean initialization complete.");
    }

    @PreDestroy
    public void preDestroy() {
        System.out.println("PreDestroy: Bean is being destroyed.");
    }

    public void customDestroy() {
        System.out.println("CustomDestroy: Bean destruction complete.");
    }

    @Override
    public String toString() {
        return "MyBean{" +
                "appName='" + appName + '\'' +
                '}';
    }
}
Explanation:
Constructor: The constructor prints when the bean is created.
setBeanName: This method is part of BeanNameAware and prints the bean's name when it's set.
@PostConstruct: This method runs after the bean is initialized and the properties are set.
afterPropertiesSet: This method is part of InitializingBean and is called after the properties are set.
customInit: A custom initialization method that can be used to perform additional tasks after the bean is initialized.
@PreDestroy: This method is invoked just before the bean is destroyed, typically when the application context is closed.
Con